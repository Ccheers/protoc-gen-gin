package main

import (
	"net/http"
	"regexp"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPkg       = protogen.GoImportPath("context")
	fmtPkg           = protogen.GoImportPath("fmt")
	ginPkg           = protogen.GoImportPath("github.com/gin-gonic/gin")
	urlPkg           = protogen.GoImportPath("net/url")
	kratosHttpPkg    = protogen.GoImportPath("github.com/go-kratos/kratos/v2/transport/http")
	kratosBindingPkg = protogen.GoImportPath("github.com/go-kratos/kratos/v2/transport/http/binding")
	middlewarePkg    = protogen.GoImportPath("github.com/go-kratos/kratos/v2/middleware")
	metadataPkg      = protogen.GoImportPath("google.golang.org/grpc/metadata")

	deprecationComment = "// Deprecated: Do not use."
)

var methodSets = make(map[string]int)

// generateFile generates a _gin.pb.go file.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_gin.kratos.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by github.com/Ccheers/protoc-gen-gin. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the Ccheers/protoc-gen-gin package it is being compiled against.")
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
	return g
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, s *protogen.Service) {
	if s.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	// HTTP Server.
	sd := &service{
		Name:     s.GoName,
		FullName: string(s.Desc.FullName()),
		FilePath: file.Desc.Path(),
		Comment:  clearComment(string(s.Comments.Leading)),
	}

	for _, method := range s.Methods {
		sd.Methods = append(sd.Methods, genMethod(method)...)
	}
	if sd.MethodSet == nil {
		sd.MethodSet = map[string]*method{}
		for _, m := range sd.Methods {
			m := m
			sd.MethodSet[m.Name] = m
		}
	}
	// 生成接口
	generateServerInterface(g, sd)
	// 生成注册函数
	generateRegisterFunc(g, sd)
	// 生成函数列表
	generateMethodList(g, sd)
}

// 生成接口
func generateServerInterface(g *protogen.GeneratedFile, s *service) {
	g.P("// ", s.Comment)
	g.P("type ", s.InterfaceName(), " interface {")
	for _, m := range s.MethodSet {
		g.P("\t", m.Name, "(", contextPkg.Ident("Context"), ", *", m.Request, ") (*", m.Reply, ", error)")
	}
	g.P("}")
}

// 生成注册函数
func generateRegisterFunc(g *protogen.GeneratedFile, s *service) {
	g.P("func Register", s.InterfaceName(), "(r ", ginPkg.Ident("IRoutes"), ", srv ", s.InterfaceName(), ") {")
	for _, m := range s.Methods {
		g.P("\t", "r.", m.Method, "(\"", m.Path, "\", ", m.HandlerName(), "(srv)) // ", m.Comment)
	}
	g.P("}")
}

func generateMethodList(g *protogen.GeneratedFile, s *service) {
	for _, m := range s.Methods {
		g.P("func ", m.HandlerName(), "(srv ", s.InterfaceName(), ") func(ctx *", ginPkg.Ident("Context"), ") {")
		g.P("return func(ctx *", ginPkg.Ident("Context"), ") {")
		g.P("")

		g.P("var in ", m.Request)
		g.P("var err error")
		g.P("")

		// 编码解码器
		if m.Body != "" {
			g.P("var DecodeRequestFunc = ", kratosHttpPkg.Ident("DefaultRequestDecoder"))
		}
		g.P("var EncodeResponseFunc = ", kratosHttpPkg.Ident("DefaultResponseEncoder"))
		g.P("var EncodeErrorFunc = ", kratosHttpPkg.Ident("DefaultErrorEncoder"))
		g.P("")

		// 注册错误处理
		g.P("defer func() {")
		g.P("if err != nil {")
		g.P("EncodeErrorFunc(ctx.Writer, ctx.Request, err)")
		g.P("}")
		g.P("}()")
		g.P("")

		g.P("out, ok := ctx.Get(\"kratos.http.encoder\")")
		g.P("if ok {")
		g.P("EncodeResponseFunc = out.(", kratosHttpPkg.Ident("EncodeResponseFunc"), ")")
		g.P("}")
		g.P("")

		if m.Body != "" {
			g.P("out, ok = ctx.Get(\"kratos.http.decoder\")")
			g.P("if ok {")
			g.P("DecodeRequestFunc = out.(", kratosHttpPkg.Ident("DecodeRequestFunc"), ")")
			g.P("}")
			g.P("")
		}

		g.P("out, ok = ctx.Get(\"kratos.http.error\")")
		g.P("if ok {")
		g.P("EncodeErrorFunc = out.(", kratosHttpPkg.Ident("EncodeErrorFunc"), ")")
		g.P("}")
		g.P("")

		if m.HasPathParams() {
			g.P("var values = make(", urlPkg.Ident("Values"), ")")
			g.P("for _, param := range ctx.Params {")
			g.P("values.Add(param.Key, param.Value)")
			g.P("}")
			g.P("if err := ", kratosBindingPkg.Ident("BindQuery"), "(values, &in); err != nil {")
			g.P("ctx.Error(err)")
			g.P("return")
			g.P("}")
			g.P("")

		}

		if m.Body != "" {
			g.P("if err = DecodeRequestFunc(ctx.Request, &in); err != nil {")
			g.P("ctx.Error(err)")
			g.P("return")
			g.P("}")
			g.P("")
		} else {
			g.P("if err := ", kratosBindingPkg.Ident("BindQuery"), "(ctx.Request.URL.Query(), &in); err != nil {")
			g.P("ctx.Error(err)")
			g.P("return")
			g.P("}")
			g.P("")
		}

		// 自制 metadata
		g.P("md := ", metadataPkg.Ident("New"), "(nil)")
		g.P("")

		g.P("for k, v := range ctx.Request.Header {")
		g.P("md.Set(k, v...)")
		g.P("}")
		g.P("")

		g.P("for k, v := range ctx.Keys {")
		g.P("if stringer, ok := v.(", fmtPkg.Ident("Stringer"), "); ok {")
		g.P("md.Set(k, stringer.String())")
		g.P("}")
		g.P("}")
		g.P("")
		g.P("newCtx := ", metadataPkg.Ident("NewIncomingContext"), "(ctx, md)")
		g.P("")

		// 加入中间件能力
		g.P("var ms []", middlewarePkg.Ident("Middleware"))
		g.P("out, ok = ctx.Get(\"kratos.middleware.provider\")")
		g.P("if ok {")
		g.P("ms = out.([]", middlewarePkg.Ident("Middleware"), ")")
		g.P("}")
		g.P("")

		g.P("handler := func(ctx ", contextPkg.Ident("Context"), ", req interface{}) (interface{}, error) {")
		g.P("return srv.", m.Name, "(ctx, req.(*", m.Request, "))")
		g.P("}")
		g.P("")

		// 执行请求
		g.P("out, err = ", middlewarePkg.Ident("Chain"), "(ms...)(handler)(newCtx, &in)")
		g.P("if err != nil {")
		g.P("ctx.Error(err)")
		g.P("return")
		g.P("}")
		g.P("")

		g.P("EncodeResponseFunc(ctx.Writer, ctx.Request, out.(*", m.Reply, "))")
		g.P("}")
		g.P("}")
	}
}

func genMethod(m *protogen.Method) []*method {
	var methods []*method

	// 存在 http rule 配置
	rule, ok := proto.GetExtension(m.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
	if rule != nil && ok {
		for _, bind := range rule.AdditionalBindings {
			methods = append(methods, buildHTTPRule(m, bind))
		}
		methods = append(methods, buildHTTPRule(m, rule))
		return methods
	}

	// 不存在走默认流程
	methods = append(methods, defaultMethod(m))
	return methods
}

// defaultMethodPath 根据函数名生成 http 路由
// 例如: GetBlogArticles ==> get: /blog/articles
// 如果方法名首个单词不是 http method 映射，那么默认返回 POST
func defaultMethod(m *protogen.Method) *method {
	names := strings.Split(toSnakeCase(m.GoName), "_")
	var (
		paths      []string
		httpMethod string
		path       string
		body       string
	)

	switch strings.ToUpper(names[0]) {
	case http.MethodGet, "FIND", "QUERY", "LIST", "SEARCH":
		httpMethod = http.MethodGet
	case http.MethodPost, "CREATE":
		httpMethod = http.MethodPost
		body = "*"
	case http.MethodPut, "UPDATE":
		httpMethod = http.MethodPut
		body = "*"
	case http.MethodPatch:
		httpMethod = http.MethodPatch
	case http.MethodDelete:
		httpMethod = http.MethodDelete
	default:
		httpMethod = "POST"
		paths = names
		body = "*"
	}

	if len(paths) > 0 {
		path = strings.Join(paths, "/")
	}

	if len(names) > 1 {
		path = strings.Join(names[1:], "/")
	}

	md := buildMethodDesc(m, httpMethod, path)
	md.Body = body
	return md
}

func buildHTTPRule(m *protogen.Method, rule *annotations.HttpRule) *method {
	var (
		path   string
		method string
	)
	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = "GET"
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = "PUT"
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = "POST"
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = "DELETE"
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = "PATCH"
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	md := buildMethodDesc(m, method, path)
	md.Body = rule.Body
	return md
}

func buildMethodDesc(m *protogen.Method, httpMethod, path string) *method {
	defer func() { methodSets[m.GoName]++ }()
	md := &method{
		Name:    m.GoName,
		Num:     methodSets[m.GoName],
		Request: m.Input.GoIdent.GoName,
		Reply:   m.Output.GoIdent.GoName,
		Path:    path,
		Method:  httpMethod,
		Comment: clearComment(string(m.Comments.Leading)),
	}
	md.initPathParams()
	return md
}

var matchFirstCap = regexp.MustCompile("([A-Z])([A-Z][a-z])")
var matchAllCap = regexp.MustCompile("([a-z0-9])([A-Z])")

func toSnakeCase(input string) string {
	output := matchFirstCap.ReplaceAllString(input, "${1}_${2}")
	output = matchAllCap.ReplaceAllString(output, "${1}_${2}")
	output = strings.ReplaceAll(output, "-", "_")
	return strings.ToLower(output)
}

func clearComment(s string) string {
	return strings.TrimSpace(strings.ReplaceAll(s, "\n", ""))
}
